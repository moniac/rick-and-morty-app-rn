{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar apiUrl = 'https://rickandmortyapi.com/api/';\n\nvar validate = function validate(qry) {\n  if (typeof qry === 'number' && Number.isInteger(qry) || Array.isArray(qry)) {\n    return \"/\" + qry;\n  }\n\n  if (typeof qry === 'object') {\n    return \"/?\" + Object.keys(qry).map(function (key) {\n      return encodeURIComponent(key) + \"=\" + encodeURIComponent(qry[key]);\n    }).join('&');\n  }\n\n  throw new Error(\"As argument use an object, an array, an integer or leave it blank\");\n};\n\nvar get = function get() {\n  var endpoint,\n      options,\n      query,\n      data,\n      response,\n      _args = arguments;\n  return _regeneratorRuntime.async(function get$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          endpoint = _args.length > 0 && _args[0] !== undefined ? _args[0] : '';\n          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          query = validate(options);\n          console.log(query);\n          _context.prev = 4;\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(fetch(apiUrl + endpoint));\n\n        case 7:\n          data = _context.sent;\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(data.json());\n\n        case 10:\n          response = _context.sent;\n          console.log(response);\n          return _context.abrupt(\"return\", response);\n\n        case 15:\n          _context.prev = 15;\n          _context.t0 = _context[\"catch\"](4);\n          console.log(_context.t0.message);\n          return _context.abrupt(\"return\", {\n            status: _context.t0.response.status,\n            error: _context.t0.response.data.error\n          });\n\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[4, 15]], Promise);\n};\n\nexports.getEndpoints = function () {\n  return get();\n};\n\nexports.getCharacter = function () {\n  var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return get('character', opt);\n};\n\nexports.getLocation = function () {\n  var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return get('location', opt);\n};\n\nexports.getEpisode = function () {\n  var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return get('episode', opt);\n};","map":{"version":3,"sources":["C:/Users/Mohammed/Documents/mohammedmulazada/reactnative/rick-and-morty-app-rn/hooks/useApi.js"],"names":["apiUrl","validate","qry","Number","isInteger","Array","isArray","Object","keys","map","key","encodeURIComponent","join","Error","get","endpoint","options","query","console","log","fetch","data","json","response","message","status","error","exports","getEndpoints","getCharacter","opt","getLocation","getEpisode"],"mappings":";;AAAA,IAAMA,MAAM,GAAG,kCAAf;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAAS;AACzB,MACE,OAAOA,GAAP,KAAe,QAAf,IAA2BC,MAAM,CAACC,SAAP,CAAiBF,GAAjB,CAA5B,IACAG,KAAK,CAACC,OAAN,CAAcJ,GAAd,CAFD,EAGE;AACD,iBAAWA,GAAX;AACA;;AAED,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC5B,kBAAYK,MAAM,CAACC,IAAP,CAAYN,GAAZ,EACVO,GADU,CAEV,UAACC,GAAD;AAAA,aACIC,kBAAkB,CAACD,GAAD,CADtB,SAC+BC,kBAAkB,CAC/CT,GAAG,CAACQ,GAAD,CAD4C,CADjD;AAAA,KAFU,EAOVE,IAPU,CAOL,GAPK,CAAZ;AAQA;;AAED,QAAM,IAAIC,KAAJ,qEAAN;AAGA,CAtBD;;AAwBA,IAAMC,GAAG,GAAG,SAANA,GAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAOC,UAAAA,QAAP,2DAAkB,EAAlB;AAAsBC,UAAAA,OAAtB,2DAAgC,EAAhC;AACLC,UAAAA,KADK,GACGhB,QAAQ,CAACe,OAAD,CADX;AAEXE,UAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAFW;AAAA;AAAA,2CAKSG,KAAK,CAACpB,MAAM,GAAGe,QAAV,CALd;;AAAA;AAKJM,UAAAA,IALI;AAAA;AAAA,2CAMaA,IAAI,CAACC,IAAL,EANb;;AAAA;AAMJC,UAAAA,QANI;AAOVL,UAAAA,OAAO,CAACC,GAAR,CAAYI,QAAZ;AAPU,2CAQHA,QARG;;AAAA;AAAA;AAAA;AAUVL,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAEK,OAAd;AAVU,2CAWH;AACNC,YAAAA,MAAM,EAAE,YAAEF,QAAF,CAAWE,MADb;AAENC,YAAAA,KAAK,EAAE,YAAEH,QAAF,CAAWF,IAAX,CAAgBK;AAFjB,WAXG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAZ;;AAkBAC,OAAO,CAACC,YAAR,GAAuB;AAAA,SAAMd,GAAG,EAAT;AAAA,CAAvB;;AACAa,OAAO,CAACE,YAAR,GAAuB;AAAA,MAACC,GAAD,uEAAO,EAAP;AAAA,SAAchB,GAAG,CAAC,WAAD,EAAcgB,GAAd,CAAjB;AAAA,CAAvB;;AACAH,OAAO,CAACI,WAAR,GAAsB;AAAA,MAACD,GAAD,uEAAO,EAAP;AAAA,SAAchB,GAAG,CAAC,UAAD,EAAagB,GAAb,CAAjB;AAAA,CAAtB;;AACAH,OAAO,CAACK,UAAR,GAAqB;AAAA,MAACF,GAAD,uEAAO,EAAP;AAAA,SAAchB,GAAG,CAAC,SAAD,EAAYgB,GAAZ,CAAjB;AAAA,CAArB","sourcesContent":["const apiUrl = 'https://rickandmortyapi.com/api/';\r\n\r\nconst validate = (qry) => {\r\n\tif (\r\n\t\t(typeof qry === 'number' && Number.isInteger(qry)) ||\r\n\t\tArray.isArray(qry)\r\n\t) {\r\n\t\treturn `/${qry}`;\r\n\t}\r\n\r\n\tif (typeof qry === 'object') {\r\n\t\treturn `/?${Object.keys(qry)\r\n\t\t\t.map(\r\n\t\t\t\t(key) =>\r\n\t\t\t\t\t`${encodeURIComponent(key)}=${encodeURIComponent(\r\n\t\t\t\t\t\tqry[key],\r\n\t\t\t\t\t)}`,\r\n\t\t\t)\r\n\t\t\t.join('&')}`;\r\n\t}\r\n\r\n\tthrow new Error(\r\n\t\t`As argument use an object, an array, an integer or leave it blank`,\r\n\t);\r\n};\r\n\r\nconst get = async (endpoint = '', options = {}) => {\r\n\tconst query = validate(options);\r\n\tconsole.log(query);\r\n\r\n\ttry {\r\n\t\tconst data = await fetch(apiUrl + endpoint);\r\n\t\tconst response = await data.json();\r\n\t\tconsole.log(response);\r\n\t\treturn response;\r\n\t} catch (e) {\r\n\t\tconsole.log(e.message);\r\n\t\treturn {\r\n\t\t\tstatus: e.response.status,\r\n\t\t\terror: e.response.data.error,\r\n\t\t};\r\n\t}\r\n};\r\n\r\nexports.getEndpoints = () => get();\r\nexports.getCharacter = (opt = {}) => get('character', opt);\r\nexports.getLocation = (opt = {}) => get('location', opt);\r\nexports.getEpisode = (opt = {}) => get('episode', opt);\r\n"]},"metadata":{},"sourceType":"script"}