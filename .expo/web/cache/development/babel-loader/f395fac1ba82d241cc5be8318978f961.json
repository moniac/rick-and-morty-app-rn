{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Mohammed\\\\Documents\\\\mohammedmulazada\\\\reactnative\\\\rick-and-morty-app-rn\\\\screens\\\\HomeScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as WebBrowser from 'expo-web-browser';\nimport React, { useEffect, useState } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { MonoText } from \"../components/StyledText\";\nimport { getCharacter } from \"../hooks/useApi\";\nexport default function HomeScreen() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      characters = _useState2[0],\n      setCharacters = _useState2[1];\n\n  useEffect(function () {\n    function getTest() {\n      var response;\n      return _regeneratorRuntime.async(function getTest$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(getCharacter());\n\n            case 2:\n              response = _context.sent;\n              setCharacters(response.results);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    getTest();\n  }, []);\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 3\n    }\n  }, React.createElement(ScrollView, {\n    style: styles.container,\n    contentContainerStyle: styles.contentContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 4\n    }\n  }, React.createElement(FlatList, {\n    data: characters,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 32\n        }\n      }, item.name);\n    },\n    keyExtractor: function keyExtractor(char) {\n      return char.id + \" - \" + char.name;\n    },\n    onEndReached: function onEndReached() {\n      return console.log('end reached');\n    },\n    onEndReachedThreshold: 0.1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  })));\n}\nHomeScreen.navigationOptions = {\n  header: null\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  },\n  developmentModeText: {\n    marginBottom: 20,\n    color: 'rgba(0,0,0,0.4)',\n    fontSize: 14,\n    lineHeight: 19,\n    textAlign: 'center'\n  },\n  contentContainer: {\n    paddingTop: 30\n  },\n  welcomeContainer: {\n    alignItems: 'center',\n    marginTop: 10,\n    marginBottom: 20\n  },\n  welcomeImage: {\n    width: 100,\n    height: 80,\n    resizeMode: 'contain',\n    marginTop: 3,\n    marginLeft: -10\n  },\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50\n  },\n  homeScreenFilename: {\n    marginVertical: 7\n  },\n  codeHighlightText: {\n    color: 'rgba(96,100,109, 0.8)'\n  },\n  codeHighlightContainer: {\n    backgroundColor: 'rgba(0,0,0,0.05)',\n    borderRadius: 3,\n    paddingHorizontal: 4\n  },\n  getStartedText: {\n    fontSize: 17,\n    color: 'rgba(96,100,109, 1)',\n    lineHeight: 24,\n    textAlign: 'center'\n  },\n  tabBarInfoContainer: _objectSpread(_objectSpread({\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0\n  }, Platform.select({\n    ios: {\n      shadowColor: 'black',\n      shadowOffset: {\n        width: 0,\n        height: -3\n      },\n      shadowOpacity: 0.1,\n      shadowRadius: 3\n    },\n    android: {\n      elevation: 20\n    }\n  })), {}, {\n    alignItems: 'center',\n    backgroundColor: '#fbfbfb',\n    paddingVertical: 20\n  }),\n  tabBarInfoText: {\n    fontSize: 17,\n    color: 'rgba(96,100,109, 1)',\n    textAlign: 'center'\n  },\n  navigationFilename: {\n    marginTop: 5\n  },\n  helpContainer: {\n    marginTop: 15,\n    alignItems: 'center'\n  },\n  helpLink: {\n    paddingVertical: 15\n  },\n  helpLinkText: {\n    fontSize: 14,\n    color: '#2e78b7'\n  }\n});","map":{"version":3,"sources":["C:/Users/Mohammed/Documents/mohammedmulazada/reactnative/rick-and-morty-app-rn/screens/HomeScreen.js"],"names":["WebBrowser","React","useEffect","useState","ScrollView","MonoText","getCharacter","HomeScreen","characters","setCharacters","getTest","response","results","styles","container","contentContainer","item","name","char","id","console","log","navigationOptions","header","StyleSheet","create","flex","backgroundColor","developmentModeText","marginBottom","color","fontSize","lineHeight","textAlign","paddingTop","welcomeContainer","alignItems","marginTop","welcomeImage","width","height","resizeMode","marginLeft","getStartedContainer","marginHorizontal","homeScreenFilename","marginVertical","codeHighlightText","codeHighlightContainer","borderRadius","paddingHorizontal","getStartedText","tabBarInfoContainer","position","bottom","left","right","Platform","select","ios","shadowColor","shadowOffset","shadowOpacity","shadowRadius","android","elevation","paddingVertical","tabBarInfoText","navigationFilename","helpContainer","helpLink","helpLinkText"],"mappings":"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","sourcesContent":["import * as WebBrowser from 'expo-web-browser';\nimport React, { useEffect, useState } from 'react';\nimport {\n\tImage,\n\tPlatform,\n\tStyleSheet,\n\tText,\n\tTouchableOpacity,\n\tView,\n\tFlatList,\n} from 'react-native';\nimport { ScrollView } from 'react-native-gesture-handler';\n\nimport { MonoText } from '../components/StyledText';\nimport { getCharacter } from '../hooks/useApi';\n\nexport default function HomeScreen() {\n\tconst [characters, setCharacters] = useState([]);\n\tuseEffect(() => {\n\t\tasync function getTest() {\n\t\t\tconst response = await getCharacter();\n\t\t\tsetCharacters(response.results);\n\t\t}\n\t\tgetTest();\n\t}, []);\n\treturn (\n\t\t<View style={styles.container}>\n\t\t\t<ScrollView\n\t\t\t\tstyle={styles.container}\n\t\t\t\tcontentContainerStyle={styles.contentContainer}\n\t\t\t>\n\t\t\t\t<FlatList\n\t\t\t\t\tdata={characters}\n\t\t\t\t\trenderItem={({ item }) => <p>{item.name}</p>}\n\t\t\t\t\tkeyExtractor={(char) => `${char.id} - ${char.name}`}\n\t\t\t\t\tonEndReached={() => console.log('end reached')}\n\t\t\t\t\tonEndReachedThreshold={0.1}\n\t\t\t\t/>\n\t\t\t\t{/* <View style={styles.getStartedContainer}>\n\t\t\t\t\t{characters.length &&\n\t\t\t\t\t\tcharacters.map((char) => {\n\t\t\t\t\t\t\treturn <p>{char.name}</p>;\n\t\t\t\t\t\t})}\n\t\t\t\t</View> */}\n\t\t\t</ScrollView>\n\t\t</View>\n\t);\n}\n\nHomeScreen.navigationOptions = {\n\theader: null,\n};\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tbackgroundColor: '#fff',\n\t},\n\tdevelopmentModeText: {\n\t\tmarginBottom: 20,\n\t\tcolor: 'rgba(0,0,0,0.4)',\n\t\tfontSize: 14,\n\t\tlineHeight: 19,\n\t\ttextAlign: 'center',\n\t},\n\tcontentContainer: {\n\t\tpaddingTop: 30,\n\t},\n\twelcomeContainer: {\n\t\talignItems: 'center',\n\t\tmarginTop: 10,\n\t\tmarginBottom: 20,\n\t},\n\twelcomeImage: {\n\t\twidth: 100,\n\t\theight: 80,\n\t\tresizeMode: 'contain',\n\t\tmarginTop: 3,\n\t\tmarginLeft: -10,\n\t},\n\tgetStartedContainer: {\n\t\talignItems: 'center',\n\t\tmarginHorizontal: 50,\n\t},\n\thomeScreenFilename: {\n\t\tmarginVertical: 7,\n\t},\n\tcodeHighlightText: {\n\t\tcolor: 'rgba(96,100,109, 0.8)',\n\t},\n\tcodeHighlightContainer: {\n\t\tbackgroundColor: 'rgba(0,0,0,0.05)',\n\t\tborderRadius: 3,\n\t\tpaddingHorizontal: 4,\n\t},\n\tgetStartedText: {\n\t\tfontSize: 17,\n\t\tcolor: 'rgba(96,100,109, 1)',\n\t\tlineHeight: 24,\n\t\ttextAlign: 'center',\n\t},\n\ttabBarInfoContainer: {\n\t\tposition: 'absolute',\n\t\tbottom: 0,\n\t\tleft: 0,\n\t\tright: 0,\n\t\t...Platform.select({\n\t\t\tios: {\n\t\t\t\tshadowColor: 'black',\n\t\t\t\tshadowOffset: { width: 0, height: -3 },\n\t\t\t\tshadowOpacity: 0.1,\n\t\t\t\tshadowRadius: 3,\n\t\t\t},\n\t\t\tandroid: {\n\t\t\t\televation: 20,\n\t\t\t},\n\t\t}),\n\t\talignItems: 'center',\n\t\tbackgroundColor: '#fbfbfb',\n\t\tpaddingVertical: 20,\n\t},\n\ttabBarInfoText: {\n\t\tfontSize: 17,\n\t\tcolor: 'rgba(96,100,109, 1)',\n\t\ttextAlign: 'center',\n\t},\n\tnavigationFilename: {\n\t\tmarginTop: 5,\n\t},\n\thelpContainer: {\n\t\tmarginTop: 15,\n\t\talignItems: 'center',\n\t},\n\thelpLink: {\n\t\tpaddingVertical: 15,\n\t},\n\thelpLinkText: {\n\t\tfontSize: 14,\n\t\tcolor: '#2e78b7',\n\t},\n});\n"]},"metadata":{},"sourceType":"module"}